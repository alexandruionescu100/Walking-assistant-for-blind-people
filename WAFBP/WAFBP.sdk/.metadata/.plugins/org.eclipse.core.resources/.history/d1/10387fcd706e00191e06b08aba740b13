/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xbasic_types.h"
#include "xparameters.h"
#include <xgpio.h>

Xuint32 *baseaddr_p = (Xuint32 *)XPAR_SONAR_0_S00_AXI_BASEADDR;


int main()
{
    int average_cnt=0;
    int average=0;
    int sensor_1_samples[10];
    int distance_sensor_1=0;

    	XGpio input, output,buzzer;
    	int button_data = 0;
    	int switch_data = 0;

       XGpio_Initialize(&input, XPAR_AXI_GPIO_0_DEVICE_ID);	//initialize input XGpio variable
       XGpio_Initialize(&output, XPAR_AXI_GPIO_1_DEVICE_ID);	//initialize output XGpio variable

       XGpio_SetDataDirection(&input, 1, 0xF);			//set first channel tristate buffer to input
       XGpio_SetDataDirection(&input, 2, 0xF);			//set second channel tristate buffer to input

       XGpio_SetDataDirection(&output, 1, 0x0);		//set first channel tristate buffer to output

		// Write values to register 0
		*(baseaddr_p+0) = 0x0000000F;
		usleep(100000);


    init_platform();

    while(1){
			print("Walking Assistant for blind people\n\r");

			// Write values to register 0
			*(baseaddr_p+0) = 0x0000000F;
			xil_printf("Wrote: 0x%08x \n\r", *(baseaddr_p+0));
			usleep(1000);
			*(baseaddr_p+0) = 0x00000007;
			xil_printf("Wrote: 0x%08x \n\r", *(baseaddr_p+0));
			xil_printf("Wrote: 0x%08x \n\r", *(baseaddr_p+2));

			// Read value from register 1
			//xil_printf("Read : 0x%08x \n\r", *(baseaddr_p+1));

			//read in a buffer 10 samples from radar
			for(int i=0;i<10;i++)
			{
				sensor_1_samples[i]=*(baseaddr_p+1);
				usleep(1000);
			}

			average=0;
			average_cnt=0;
			//average the samples, except the samples =0;
			for(int j=0;j<10;j++)
			{
				if(sensor_1_samples[j]!=0)
				{
					average_cnt++;
					average+=sensor_1_samples[j];
				}
			}
			average = average/average_cnt;
			if(average!=0)
			distance_sensor_1=average;

			xil_printf("Sonar1 : %d cm \n\r", distance_sensor_1);

			if(distance_sensor_1<50)
			{
				XGpio_DiscreteWrite(&output, 1, 15);
			}
			else
			{
				XGpio_DiscreteWrite(&output, 1, 0);
			}

			usleep(200000);			//delay
    }

    cleanup_platform();
    return 0;
}
